<?php

{% block namespace %}
namespace {{ namespace }}\Controller{{ entity_namespace ? '\\' ~ entity_namespace : '' }};
{% endblock %}

{% block use_statements %}
use {{ namespace }}\Entity\{{ entity }};
{% if extended %}
use {{ namespace }}\Manager{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity }}Manager;
use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Routing\ClassResourceInterface;
use Sulu\Component\Rest\ListBuilder\Doctrine\DoctrineListBuilderFactory;
use Sulu\Component\Rest\ListBuilder\Doctrine\FieldDescriptor\DoctrineFieldDescriptor;
use Sulu\Component\Rest\ListBuilder\ListRepresentation;
use Sulu\Component\Rest\ListBuilder\ListRestHelper;
use Sulu\Component\Rest\RequestParametersTrait;
use Sulu\Component\Rest\RestHelperInterface;
use Sulu\Component\Security\SecuredControllerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
{% else %}
use FOS\RestBundle\Routing\ClassResourceInterface;
use L91\Sulu\Bundle\BackendBundle\Controller\AbstractBackendController;
use Sulu\Component\Rest\ListBuilder\Doctrine\FieldDescriptor\DoctrineFieldDescriptor;
{% endif %}
{% endblock %}

{% block class_annotations %}
/**
 * {% include 'sulu/comment.twig' %}

 */
{% endblock %}
{% block class_definition %}
{% if extended %}
class {{ entity_class }}Controller extends FOSRestController implements ClassResourceInterface, SecuredControllerInterface
{% else %}
class {{ entity_class }}Controller extends AbstractBackendController implements ClassResourceInterface
{% endif %}
{% endblock %}
{
{% if extended %}
    use RequestParametersTrait;
{% endif %}
{% block getSecurityContext %}
    /**
     * {@inheritdoc}
     */
    public function getSecurityContext()
    {
        return 'sulu.{{ bundle_prefix|replace('_', '.') }}.{{ entity_pluralize|snake_case }}';
    }

{% endblock %}
{% block getManager %}
    /**
{% if extended %}
     * Return the manager for the entity.
     *
     * @return {{ entity }}Manager
{% else %}
     * {@inheritdoc}
{% endif %}
     */
    public function getManager()
    {
        return $this->get('{{ bundle_prefix }}.manager.{{ entity|snake_case }}');
    }

{% endblock %}
{% block getFieldDescriptors %}
    /**
     * Return the field descriptors.
     *
     * @param string $locale
     * @param array $filters
     *
     * @return DoctrineFieldDescriptor[] $filters
     */
    public function getFieldDescriptors($locale, $filters)
    {
        $fieldDescriptors = [];

{% set field = metadata.singleIdentifierFieldName %}
{% set translatePrefix = field in public_translations ? 'public' : bundle_prefix %}
        $fieldDescriptors['{{ metadata.getColumnName(field) }}'] = new DoctrineFieldDescriptor(
            '{{ field }}',
            '{{ metadata.getColumnName(field) }}',
            {{ entity }}::class,
            '{{ translatePrefix }}.{{ field|snake_case }}',
            [],
            false,
            true
        );

{% for field in metadata.fieldNames if metadata.singleIdentifierFieldName != field %}
{% block field_descriptor %}
{% set translatePrefix = field in public_translations ? 'public' : bundle_prefix %}
        $fieldDescriptors['{{ metadata.getColumnName(field) }}'] = new DoctrineFieldDescriptor(
            '{{ field }}',
            '{{ metadata.getColumnName(field) }}',
            {{ entity }}::class,
            '{{ translatePrefix }}.{{ field|snake_case }}',
            [],
            false,
            false,
            {{ metadata.typeOfField(field) in ['date', 'datetime'] ? '\'date\'' : '\'\'' }}
        );
{% endblock %}

{% endfor %}
        return $fieldDescriptors;
    }

{% endblock %}
{% block getModelClass %}
    /**
     * Return the entity model class.
     *
     * @return string
     */
    public function getModelClass()
    {
        return {{ entity }}::class;
    }

{% endblock %}
{% block getListName %}
    /**
     * Return the entity list name.
     *
     * @return string
     */
    public function getListName()
    {
        return '{{ entity_pluralize|snake_case }}';
    }
{% endblock %}
{% if extended %}

{% block cgetFieldsAction %}
    /**
     * Return the entity fields.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function cgetFieldsAction(Request $request)
    {
        $fieldDescriptors = $this->getFieldDescriptors(
            $this->getLocale($request),
            $this->getFilters($request)
        );

        return $this->handleView($this->view($fieldDescriptors));
    }

{% endblock %}
{% block cgetAction %}
    /**
     * Return list of entities.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function cgetAction(Request $request)
    {
        $locale = $this->getLocale($request);
        $filters = $this->getFilters($request);

        // flatted entities
        if ($this->getBooleanRequestParameter($request, 'flat')) {
            /** @var RestHelperInterface $restHelper */
            $restHelper = $this->get('sulu_core.doctrine_rest_helper');

            /** @var DoctrineListBuilderFactory $factory */
            $factory = $this->get('sulu_core.doctrine_list_builder_factory');

            // get model class
            $listBuilder = $factory->create($this->getModelClass());

            // get fieldDescriptors
            $fieldDescriptors = $this->getFieldDescriptors($locale, $filters);
            $restHelper->initializeListBuilder($listBuilder, $fieldDescriptors);

            // load entities
            $list = $listBuilder->execute();

            // get pagination
            $total = $listBuilder->count();
            $page = $listBuilder->getCurrentPage();
            $limit = $listBuilder->getLimit();
        } else {
            // load all entities by filters
            $list = $this->getManager()->findAll($locale, $filters);

            // get pagination
            $offset = $this->getOffset($filters);
            $limit = $this->getLimit($filters);
            $total = $offset + count($list);
            $page = $this->getPage($filters);

            // if to avoid db request with less items then the limit
            if (count($list) >= $limit) {
                $total = $this->getManager()->count($locale, $this->getCountFilters($filters));
            }
        }

        // create list representation
        $representation = new ListRepresentation(
            $list,
            $this->getListName(),
            $request->get('_route'),
            $request->query->all(),
            $page,
            $limit,
            $total
        );

        return $this->handleView($this->view($representation));
    }

{% endblock %}
{% block getAction %}
    /**
     * Return specific entity.
     *
     * @param Request $request
     * @param $id
     *
     * @return Response
     */
    public function getAction(Request $request, $id)
    {
        $locale = $this->getLocale($request);

        // get entity
        $entity = $this->getManager()->findById($id, $locale);

        return $this->handleView($this->view($entity));
    }

{% endblock %}
{% block postAction %}
    /**
     * Create a new entity.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function postAction(Request $request)
    {
        $locale = $this->getLocale($request);

        // create entity
        $entity = $this->getManager()->save($this->getData($request), $locale);
        $this->flushEntities();

        return $this->handleView($this->view($entity));
    }

{% endblock %}
{% block putAction %}
    /**
     * Edit a specific entity.
     *
     * @param Request $request
     * @param $id
     *
     * @return Response
     */
    public function putAction(Request $request, $id)
    {
        $locale = $this->getLocale($request);

        // save entity
        $entity = $this->getManager()->save($this->getData($request), $locale, $id);
        $this->flushEntities();

        return $this->handleView($this->view($entity));
    }

{% endblock %}
{% block deleteAction %}
    /**
     * Remove a specific entity.
     *
     * @param Request $request
     * @param $id
     *
     * @return Response
     */
    public function deleteAction(Request $request, $id)
    {
        $locale = $this->getLocale($request);

        // delete entity
        $entity = $this->getManager()->delete($id, $locale);
        $this->flushEntities();

        if (!$entity) {
            return new Response(null);
        }

        return $this->handleView($this->view($entity));
    }

{% endblock %}
{% block getLocale %}
    /**
     * {@inheritdoc}
     */
    public function getLocale(Request $request)
    {
        return $request->get('locale');
    }

{% endblock %}
{% block getFilters %}
    /**
     * Get the request filters for entity list.
     *
     * @param Request $request
     *
     * @return array
     */
    protected function getFilters(Request $request)
    {
        $filters = $request->query->all();

        $listRestHelper = $this->get('sulu_core.list_rest_helper');

        unset($filters['page']);
        unset($filters['search']);
        unset($filters['locale']);
        unset($filters['flat']);

        $filters['fields'] = $listRestHelper->getFields();
        $filters['limit'] = (int) $listRestHelper->getLimit();
        $filters['offset'] = (int) $listRestHelper->getOffset();
        $filters['sortColumn'] = $listRestHelper->getSortColumn();
        $filters['sortOrder'] = $listRestHelper->getSortOrder();
        $filters['searchFields'] = $listRestHelper->getSearchFields();
        $filters['searchPattern'] = $listRestHelper->getSearchPattern();

        return $filters;
    }

{% endblock %}
{% block getData %}
    /**
     * Get the request data.
     *
     * @param Request $request
     *
     * @return array
     */
    protected function getData(Request $request)
    {
        return $request->request->all();
    }

{% endblock %}
{% block getCountFilters %}
    /**
     * Unset the pagination filters for total count.
     *
     * @param array $filters
     * @return array
     */
    protected function getCountFilters($filters)
    {
        unset($filters['page']);
        unset($filters['offset']);
        unset($filters['limit']);

        return $filters;
    }

{% endblock %}
{% block getLimit %}
    /**
     * Get limit.
     *
     * @param array $filters
     *
     * @return int
     */
    protected function getLimit($filters)
    {
        if (!isset($filters['limit'])) {
            return 10;
        }

        return $filters['limit'];
    }

{% endblock %}
{% block getOffset %}
    /**
     * Get offset.
     *
     * @param array $filters
     *
     * @return int
     */
    protected function getOffset($filters)
    {
        if (!isset($filters['offset'])) {
            return 0;
        }

        return $filters['offset'];
    }

{% endblock %}
{% block getPage %}
    /**
     * Get page.
     *
     * @param array $filters
     *
     * @return int
     */
    protected function getPage($filters)
    {
        if (!isset($filters['page'])) {
            if (isset($filters['limit']) && isset($filters['offset'])) {
                return floor($filters['offset'] / $filters['limit']) + 1;
            }

            return 1;
        }

        return $filters['page'];
    }

{% endblock %}
    /**
     * Run all open database transactions.
     */
    protected function flushEntities()
    {
        $this->get('doctrine.orm.entity_manager')->flush();
    }
{% endif %}
}
